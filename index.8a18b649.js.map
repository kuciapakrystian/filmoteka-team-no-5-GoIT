{"mappings":"ACAA,MAAM,EAAS,mCACT,EAAU,+BAEV,EAAgB,SAAS,aAAa,CAAC,oBA+B7C,eAAe,IACb,IAAM,EAAM,IAAI,IAAI,CAAC,EAAE,EAAQ,iBAAiB,CAAC,EACjD,EAAI,YAAY,CAAC,MAAM,CAAC,UAAW,GAEnC,IAAM,EAAM,MAAM,MAAM,GAExB,MAAO,AADM,CAAA,MAAM,EAAI,IAAI,EAA3B,EACY,MAAM,AACpB,CAqBA,eAAe,EAAoB,CAAM,EACvC,IAAM,EAAS,MAAM,IACrB,OAAO,EACJ,GAAG,CACF,CAAC,CACC,GAAA,CAAE,CACF,YAAA,CAAW,CACX,MAAA,CAAK,CACL,aAAA,CAAY,CACZ,UAAA,CAAS,CACT,eAAA,CAAc,CACd,WAAA,CAAU,CACV,SAAA,CAAQ,CACT,CAAG,CAAM,IACR,IAAM,EAAS,EAAc,CAAC,+BAA+B,EAAE,EAAY,CAAC,CA1ElE,uDA2EJ,EAAO,EAAe,EAAa,KAAK,CAAC,IAAI,CAAC,EAAE,CAAG,UACnD,EAAc,EAAY,AAnCxC,SAAmB,CAAO,CAAE,CAAM,EAChC,IAAM,EAAc,EAAE,CAEtB,IAAK,IAAM,KAAS,EAAQ,CAC1B,GAAI,AAAY,QAAZ,GAAqB,AAAmB,IAAnB,EAAQ,MAAM,CAAQ,CAC7C,EAAY,IAAI,CAAC,SACjB,KACF,CAAW,EAAQ,QAAQ,CAAC,EAAM,EAAE,GAClC,EAAY,IAAI,CAAC,EAAM,IAAI,CAE/B,CAMA,OAJI,EAAY,MAAM,CAAG,GACvB,EAAY,MAAM,CAAC,EAAG,EAAY,MAAM,CAAG,EAAG,SAGzC,EAAY,IAAI,CAAC,KAC1B,EAkBkD,EAAW,GAAU,UAC/D,MAAO,CAAC;sDACsC,EAAE,EAAG;oDACP,EAAE,EAAG;;iBAExC,EAAE,EAAG;0BACI,EAAE,EAAY;oBACpB,EAAE,EAAM;wBACJ,EAAE,EAAY;6BACT,EAAE,EAAe;2BACnB,EAAE,EAAa;;gDAEM,EAAE,EAAO,aAAa,EAAE,EAAe;;;iBAGtE,EAAE,EAAM,WAAW,GAAG;;;oBAGnB,EAAE,EAAY,GAAG,EAAE,EAAK;;;;;MAKtC,CAAC,AACD,GAED,IAAI,CAAC,GACV,CAEA,AArGA,CAAA,eAAiC,CAAI,EACnC,IAAM,EAAM,IAAI,IAAI,CAAC,EAAE,EAAQ,oBAAoB,CAAC,EACpD,EAAI,YAAY,CAAC,MAAM,CAAC,UAAW,GACnC,EAAI,YAAY,CAAC,MAAM,CAAC,OALf,GAOT,IAAM,EAAM,MAAM,MAAM,GAExB,OADa,MAAM,EAAI,IAAI,EAE7B,CAAA,EAVW,GAwGR,IAAI,CAAC,AAAA,GAEG,EADK,EAAI,OAAO,GAGxB,IAAI,CAAC,AAAA,IACJ,EAAc,kBAAkB,CAAC,YAAa,EAChD","sources":["<anon>","src/js/cards-home.js"],"sourcesContent":["const apiKey = \"cc5e154eef1a5f4b837eb970b7b620d1\";\nconst baseUrl = \"https://api.themoviedb.org/3\";\nconst NO_POSTER = `https://i.ibb.co/r76r6Vt/oie-30214851-Ms-Wl-PTS0.png`;\nconst galleryMovies = document.querySelector(\".cards-home-list\");\nlet page = 1;\nasync function fetchPopularMovie(page) {\n    const url = new URL(`${baseUrl}/trending/movie/week`);\n    url.searchParams.append(\"api_key\", apiKey);\n    url.searchParams.append(\"page\", page);\n    const res = await fetch(url);\n    const data = await res.json();\n    return data;\n}\nasync function fetchMostPopularMovies() {\n    const url = new URL(`${baseUrl}/trending/movie/day`);\n    url.searchParams.append(\"api_key\", apiKey);\n    const res = await fetch(url);\n    const data = await res.json();\n    return data;\n}\nasync function fetchMovieId(id) {\n    const url = new URL(`${baseUrl}/movie/${id}`);\n    url.searchParams.append(\"api_key\", apiKey);\n    const res = await fetch(url);\n    const data = await res.json();\n    return data;\n}\nasync function fetchGenres() {\n    const url = new URL(`${baseUrl}/genre/movie/list`);\n    url.searchParams.append(\"api_key\", apiKey);\n    const res = await fetch(url);\n    const data = await res.json();\n    return data.genres;\n}\nfunction getGenres(arrayId, genres) {\n    const arrayGenres = [];\n    for (const value of genres){\n        if (arrayId === \"N/A\" || arrayId.length === 0) {\n            arrayGenres.push(\"Other\");\n            break;\n        } else if (arrayId.includes(value.id)) arrayGenres.push(value.name);\n    }\n    if (arrayGenres.length > 2) arrayGenres.splice(2, arrayGenres.length - 2, \"Other\");\n    return arrayGenres.join(\", \");\n}\nasync function renderPopularMovies(movies) {\n    const genres = await fetchGenres();\n    return movies.map(({ id, poster_path, title, release_date, genre_ids, original_title, popularity, overview } = movies)=>{\n        const poster = poster_path ? `https://image.tmdb.org/t/p/w500${poster_path}` : NO_POSTER;\n        const year = release_date ? release_date.split(\"-\")[0] : \"Unknown\";\n        const checkGenres = genre_ids ? getGenres(genre_ids, genres) : \"Unknown\";\n        return `\n      <li class='cards-home-movie_list_item' data-id=\"${id}\" >\n      <div href=\"\" class='cards-home-movie-link' id=${id}>\n      <div class=\"cards-home-movie-photo\"\n        data-id=\"${id}\"\n        data-poster_path=\"${poster_path}\"\n        data-title=\"${title}\"\n        data-genre_ids=\"${checkGenres}\"\n        data-original_title=\"${original_title}\"\n        data-release_date=\"${release_date}\"\n      ></div>\n        <img class=\"cards-home-movie-image\" src=${poster} alt='Poster ${original_title}' loading='lazy' />\n        <div class='cards-home-movie-info'>\n            <p class='cards-home-movie-title'>\n              <b>${title.toUpperCase()}</b>\n            </p>\n            <p class='cards-home-movie-date'>\n              <span>${checkGenres} | ${year}</span>\n            </p>\n        </div>\n        </div>\n      </li>\n      `;\n    }).join(\"\");\n}\nfetchPopularMovie(page).then((res)=>{\n    const obj = res.results;\n    return renderPopularMovies(obj);\n}).then((res)=>{\n    galleryMovies.insertAdjacentHTML(\"beforeend\", res);\n});\n\n//# sourceMappingURL=index.8a18b649.js.map\n","const apiKey = 'cc5e154eef1a5f4b837eb970b7b620d1';\nconst baseUrl = 'https://api.themoviedb.org/3';\nconst NO_POSTER = `https://i.ibb.co/r76r6Vt/oie-30214851-Ms-Wl-PTS0.png`;\nconst galleryMovies = document.querySelector('.cards-home-list');\nlet page = 1;\n\nasync function fetchPopularMovie(page) {\n  const url = new URL(`${baseUrl}/trending/movie/week`);\n  url.searchParams.append('api_key', apiKey);\n  url.searchParams.append('page', page);\n\n  const res = await fetch(url);\n  const data = await res.json();\n  return data;\n}\n\nasync function fetchMostPopularMovies() {\n  const url = new URL(`${baseUrl}/trending/movie/day`);\n  url.searchParams.append('api_key', apiKey);\n\n  const res = await fetch(url);\n  const data = await res.json();\n  return data;\n}\n\nasync function fetchMovieId(id) {\n  const url = new URL(`${baseUrl}/movie/${id}`);\n  url.searchParams.append('api_key', apiKey);\n\n  const res = await fetch(url);\n  const data = await res.json();\n  return data;\n}\n\nasync function fetchGenres() {\n  const url = new URL(`${baseUrl}/genre/movie/list`);\n  url.searchParams.append('api_key', apiKey);\n\n  const res = await fetch(url);\n  const data = await res.json();\n  return data.genres;\n}\n\nfunction getGenres(arrayId, genres) {\n  const arrayGenres = [];\n\n  for (const value of genres) {\n    if (arrayId === 'N/A' || arrayId.length === 0) {\n      arrayGenres.push('Other');\n      break;\n    } else if (arrayId.includes(value.id)) {\n      arrayGenres.push(value.name);\n    }\n  }\n\n  if (arrayGenres.length > 2) {\n    arrayGenres.splice(2, arrayGenres.length - 2, 'Other');\n  }\n\n  return arrayGenres.join(', ');\n}\n\nasync function renderPopularMovies(movies) {\n  const genres = await fetchGenres();\n  return movies\n    .map(\n      ({\n        id,\n        poster_path,\n        title,\n        release_date,\n        genre_ids,\n        original_title,\n        popularity,\n        overview,\n      } = movies) => {\n        const poster = poster_path ? `https://image.tmdb.org/t/p/w500${poster_path}` : NO_POSTER;\n        const year = release_date ? release_date.split('-')[0] : 'Unknown';\n        const checkGenres = genre_ids ? getGenres(genre_ids, genres) : 'Unknown';\n        return `\n      <li class='cards-home-movie_list_item' data-id=\"${id}\" >\n      <div href=\"\" class='cards-home-movie-link' id=${id}>\n      <div class=\"cards-home-movie-photo\"\n        data-id=\"${id}\"\n        data-poster_path=\"${poster_path}\"\n        data-title=\"${title}\"\n        data-genre_ids=\"${checkGenres}\"\n        data-original_title=\"${original_title}\"\n        data-release_date=\"${release_date}\"\n      ></div>\n        <img class=\"cards-home-movie-image\" src=${poster} alt='Poster ${original_title}' loading='lazy' />\n        <div class='cards-home-movie-info'>\n            <p class='cards-home-movie-title'>\n              <b>${title.toUpperCase()}</b>\n            </p>\n            <p class='cards-home-movie-date'>\n              <span>${checkGenres} | ${year}</span>\n            </p>\n        </div>\n        </div>\n      </li>\n      `;\n      },\n    )\n    .join('');\n}\n\nfetchPopularMovie(page)\n  .then(res => {\n    const obj = res.results;\n    return renderPopularMovies(obj);\n  })\n  .then(res => {\n    galleryMovies.insertAdjacentHTML('beforeend', res);\n  });\n"],"names":["apiKey","baseUrl","galleryMovies","document","querySelector","fetchGenres","url","URL","searchParams","append","res","fetch","data","json","genres","renderPopularMovies","movies","map","id","poster_path","title","release_date","genre_ids","original_title","popularity","overview","poster","year","split","checkGenres","getGenres","arrayId","arrayGenres","value","length","push","includes","name","splice","join","toUpperCase","fetchPopularMovie","page","then","results","insertAdjacentHTML"],"version":3,"file":"index.8a18b649.js.map"}